# Parameter	Choices / Defaults	Comments
# config
# list / elements=dictionary / required
# A list of dictionaries containing application queuing profile details.

# application
# list / elements=dictionary
# Defines individual applications within an application set that share a common purpose or function.

# Grouping similar applications into sets allows administrators to apply uniform policies efficiently.

# app_protocol
# string
# - Required if `type` is `url` or `server_ip`; specifies the protocol used by the application. - If `type` is `url`, `app_protocol` must be `TCP`. - Permissible values: - 'TCP': Transmission Control Protocol (reliable, connection-oriented). - 'UDP': User Datagram Protocol (fast, connectionless, no guaranteed delivery). - 'TCP_UDP': Supports both TCP and UDP communication. - 'IP': Internet Protocol for network addressing and routing.

# application_set_name
# string
# Specifies the application set under which this application is created.

# description
# string
# A brief description of the application.

# dscp
# integer
# Required if `type` is `server_ip`; specifies DSCP value or `network_identity` details for the application.

# DSCP value must be in the range 0 - 63.

# engine_id
# integer
# Identifier for the engine managing the application.

# help_string
# string
# Provides the purpose or intended use of the application.

# ignore_conflict
# boolean
# Choices:
# true
# false
# Flag to indicate whether to ignore conflicts during configuration.

# name
# string
# Specifies the name of the application.

# Required for create, update, and delete operations.

# network_identity
# dictionary
# Required if `type` is `server_ip`; defines network-related parameters for application identification.

# ip_subnet
# list / elements=string
# List of IP addresses or subnets associated with the application.

# lower_port
# string
# Specifies the lower range of ports for network communication.

# port
# string
# Specifies the communication port number for the application.

# protocol
# string
# Specifies the network protocol used by the application.

# upper_port
# string
# Specifies the upper range of ports for network communication.

# rank
# integer
# Specifies the priority ranking of the application.

# server_name
# string
# Required if `type` is `server_name`; specifies the server name for application identification.

# traffic_class
# string
# - Defines traffic prioritization based on network policies, ensuring critical applications receive the required bandwidth. - Permissible values: - "BROADCAST_VIDEO": Video traffic broadcasted to multiple recipients. - "BULK_DATA": Large data transfers like file uploads or backups. - "MULTIMEDIA_CONFERENCING": Audio and video traffic for conferencing. - "MULTIMEDIA_STREAMING": Streaming video or audio content. - "NETWORK_CONTROL": Traffic for managing and controlling network infrastructure. - "OPS_ADMIN_MGMT": Traffic for network operational and administrative tasks. - "REAL_TIME_INTERACTIVE": Low-latency traffic for real-time interactive applications. - "SIGNALING": Control traffic for setting up and managing sessions (e.g., VoIP). - "TRANSACTIONAL_DATA": Data related to transactions, like financial or retail operations. - "VOIP_TELEPHONY": Voice traffic over IP networks. - "BEST_EFFORT": Non-critical traffic delivered on a best-effort basis. - "SCAVENGER": Low-priority traffic, often background tasks.

# type
# string
# - Specifies how the application is identified within the network. - Permissible values: - server_name: Custom application identified by server name. - url: Custom application identified by URL. - server_ip: Custom application identified by server IP address.

# url
# string
# Required if `type` is `url`; specifies the URL for application identification.

# application_policy
# list / elements=dictionary
# Defines how an application's traffic is managed and prioritized within a network.

# application_queuing_profile_name
# string
# Defines rules for traffic management by prioritizing network traffic within the application policy.

# clause
# list / elements=dictionary
# Defines specific rules or conditions under which an application set is added to the application policy.

# clause_type
# string
# - Specifies the type of clause for the application policy. - Permissible values: - "BUSINESS_RELEVANCE": Defines the importance of the application to business operations, affecting its priority and handling in the network policy. - "APPLICATION_POLICY_KNOBS": Configurable settings that manage the application's network behavior, such as traffic prioritization and resource allocation.

# relevance_details
# list / elements=dictionary
# Details about how relevant the application is to business operations.

# application_set_name
# list / elements=string
# Include all the application sets for which the application policy has to be created

# relevance
# string
# - Specifies whether the application set is relevant to the application policy. - Permissible values: - "BUSINESS_RELEVANT": The application is critical for business functions. - "BUSINESS_IRRELEVANT": The application is not essential for business operations. - "DEFAULT": A default setting when no specific relevance is assigned.

# device_type
# string
# Indicates whether the device is wired or wireless.

# name
# string
# Name of the application policy

# policy_status
# string
# - Represents the current status of the application policy. - Helps track whether the policy is active, deleted, or restored. - Permissible values: - "NONE": The policy is active and in its original, operational state. - "DELETED": The policy has been removed and is no longer active. - "RESTORED": The policy has been reactivated after being deleted.

# site_names
# list / elements=string
# The site or area within the network where the policy should be enforced.

# ssid_name
# string
# Specifies the SSID name for wireless devices. Required if device_type is set to 'wireless'.

# application_sets
# list / elements=dictionary
# Defines a logical grouping of network applications that share common policies and configuration settings.

# Application sets enable network administrators to manage and apply policies to multiple applications simultaneously, streamlining policy enforcement, monitoring, and optimization.

# name
# string
# Specifies the name of the application set.

# Required for deleting an application set.

# queuing_profile
# list / elements=dictionary
# Defines queuing profile settings for applications.

# bandwidth_settings
# dictionary
# Specifies bandwidth allocation details.

# interface_speed_settings
# list / elements=dictionary
# Defines bandwidth allocation for different types of network traffic based on interface speed.

# bandwidth_percentages
# dictionary
# - Defines the percentage of bandwidth assigned to various traffic categories. - The sum of all category allocations must not exceed 100%.

# best_effort
# string
# Bandwidth for non-priority, general-purpose traffic.

# broadcast_video
# string
# Bandwidth for one-to-many video distribution.

# bulk_data
# string
# Bandwidth for large-volume, non-time-sensitive data transfers.

# multimedia_conferencing
# string
# Bandwidth for combined audio-video conferencing traffic.

# multimedia_streaming
# string
# Bandwidth for real-time audio and video streaming.

# network_control
# string
# Bandwidth for traffic related to network management and operation.

# ops_admin_mgmt
# string
# Bandwidth for operations and administration management traffic.

# real_time_interactive
# string
# Bandwidth for low-latency applications requiring immediate response.

# scavenger
# string
# Bandwidth for low-priority traffic that can be delayed or dropped.

# signaling
# string
# Bandwidth for network control messages managing communication sessions.

# transactional_data
# string
# Bandwidth allocated to transactional data traffic.

# voip_telephony
# string
# Bandwidth for voice and video calls over IP.

# interface_speed
# string
# - Specifies the data transfer rate of a network interface. - Permissible values: - "ALL": Applies to all interface speeds. - "HUNDRED_GBPS": 100 Gbps. - "TEN_GBPS": 10 Gbps. - "ONE_GBPS": 1 Gbps. - "HUNDRED_MBPS": 100 Mbps. - "TEN_MBPS": 10 Mbps. - "ONE_MBPS": 1 Mbps.

# is_common_between_all_interface_speeds
# boolean
# Choices:
# true
# false
# Indicates whether bandwidth settings apply uniformly across all interface speeds.

# dscp_settings
# dictionary
# - Defines the DSCP (Differentiated Services Code Point) values assigned to different traffic categories. - Each DSCP value must be in the range of 0 to 63.

# best_effort
# string
# DSCP value for best-effort traffic, which does not require specific quality or priority guarantees.

# broadcast_video
# string
# DSCP value for broadcast video traffic, typically distributed in a one-to-many model.

# bulk_data
# string
# DSCP value for large-volume data transfers that can tolerate delays or interruptions.

# multimedia_conferencing
# string
# DSCP value for multimedia conferencing traffic, including both audio and video communication.

# multimedia_streaming
# string
# DSCP value for real-time audio and video streaming traffic.

# network_control
# string
# DSCP value for network control traffic related to management and operation.

# ops_admin_mgmt
# string
# DSCP value for operations, administration, and management traffic.

# real_time_interactive
# string
# DSCP value for interactive applications requiring low latency and immediate responsiveness.

# scavenger
# string
# DSCP value for low-priority traffic that can be delayed or dropped in case of congestion.

# signaling
# string
# DSCP value for signaling traffic used to establish, manage, and terminate communication sessions.

# transactional_data
# string
# DSCP value for transactional data traffic, involving data exchanges between systems.

# voip_telephony
# string
# DSCP value for voice and video calls transmitted over IP networks.

# new_profile_description
# string
# New description of the queuing profile.

# new_profile_name
# string
# New name for the queuing profile (used for updates).

# profile_description
# string
# Description of the queuing profile.

# profile_name
# string
# Name of the queuing profile.

# Required for create, update, and delete operations.

# config_verify
# boolean
# Choices:
# true  ←
# false
# Set to True to verify the Cisco Catalyst Center after applying the playbook config.

# dnac_api_task_timeout
# integer
# Default: 1200	
# Defines the timeout in seconds for API calls to retrieve task details. If the task details are not received within this period, the process will end, and a timeout notification will be logged.

# dnac_debug
# boolean
# Choices:
# true
# false  ←
# Indicates whether debugging is enabled in the Cisco Catalyst Center SDK.

# dnac_host
# string / required
# The hostname of the Cisco Catalyst Center.

# dnac_log
# boolean
# Choices:
# true
# false  ←
# Flag to enable/disable playbook execution logging.

# When true and dnac_log_file_path is provided, - Create the log file at the execution location with the specified name.

# When true and dnac_log_file_path is not provided, - Create the log file at the execution location with the name 'dnac.log'.

# When false, - Logging is disabled.

# If the log file doesn't exist, - It is created in append or write mode based on the "dnac_log_append" flag.

# If the log file exists, - It is overwritten or appended based on the "dnac_log_append" flag.

# dnac_log_append
# boolean
# Choices:
# true  ←
# false
# Determines the mode of the file. Set to True for 'append' mode. Set to False for 'write' mode.

# dnac_log_file_path
# string
# Default: dnac.log	
# Governs logging. Logs are recorded if dnac_log is True.

# If path is not specified, - When 'dnac_log_append' is True, 'dnac.log' is generated in the current Ansible directory; logs are appended. - When 'dnac_log_append' is False, 'dnac.log' is generated; logs are overwritten.

# If path is specified, - When 'dnac_log_append' is True, the file opens in append mode. - When 'dnac_log_append' is False, the file opens in write (w) mode. - In shared file scenarios, without append mode, content is overwritten after each module execution. - For a shared log file, set append to False for the 1st module (to overwrite); for subsequent modules, set append to True.

# dnac_log_level
# string
# Default: WARNING	
# Sets the threshold for log level. Messages with a level equal to or higher than this will be logged. Levels are listed in order of severity [CRITICAL, ERROR, WARNING, INFO, DEBUG].

# CRITICAL indicates serious errors halting the program. Displays only CRITICAL messages.

# ERROR indicates problems preventing a function. Displays ERROR and CRITICAL messages.

# WARNING indicates potential future issues. Displays WARNING, ERROR, CRITICAL messages.

# INFO tracks normal operation. Displays INFO, WARNING, ERROR, CRITICAL messages.

# DEBUG provides detailed diagnostic info. Displays all log messages.

# dnac_password
# string
# The password for authentication at the Cisco Catalyst Center.

# dnac_port
# string
# Default: 443	
# Specifies the port number associated with the Cisco Catalyst Center.

# dnac_task_poll_interval
# integer
# Default: 2	
# Specifies the interval in seconds between successive calls to the API to retrieve task details.

# dnac_username
# string
# Default: admin	
# The username for authentication at the Cisco Catalyst Center.

# aliases: user
# dnac_verify
# boolean
# Choices:
# true  ←
# false
# Flag to enable or disable SSL certificate verification.

# dnac_version
# string
# Default: 2.2.3.3	
# Specifies the version of the Cisco Catalyst Center that the SDK should use.

# state
# string
# Choices:
# merged  ←
# deleted
# The desired state of the configuration after module execution.

# validate_response_schema
# boolean
# Choices:
# true  ←
# false
# Flag for Cisco Catalyst Center SDK to enable the validation of request bodies against a JSON schema.
#====================================================================
# Yamale validation schema for application_policy
# This schema is used to validate the input data for the application policy workflow
catalyst_center_version: str(required=False)
catalyst_center_verify: bool(required=False)
catalyst_center_api_task_timeout: int(required=False, default=1200)
catalyst_center_debug: bool(required=False, default=False)
catalyst_center_log: bool(required=False, default=False)
catalyst_center_log_append: bool(required=False, default=True)
catalyst_center_log_file_path: str(required=False, default='dnac.log')
catalyst_center_log_level: enum("CRITICAL", "ERROR", "WARNING", "INFO", "DEBUG", required=False)
catalyst_center_config_verify: bool(required=False)
application_policy_details: list(include('application_policy_details_type'), required=True, min=0, max=500)

---
application_policy_details_type:
  queuing_profile: list(include('queuing_profile_type'), required=False)
  application_sets: list(include('application_sets_type'), required=False)
  application: list(include('application_type'), required=False)
  application_policy: list(include('application_policy_type'), required=False)

queuing_profile_type:
  profile_name: str(required=True)
  new_profile_name: str(required=False)
  profile_description: str(required=False)
  new_profile_description: str(required=False)
  bandwidth_settings: include('bandwidth_settings_type', required=False)
  dscp_settings:
    transactional_data: str(required=False)
    best_effort: str(required=False)
    voip_telephony: str(required=False)
    multimedia_streaming: str(required=False)
    real_time_interactive: str(required=False)
    multimedia_conferencing: str(required=False)
    signaling: str(required=False)
    scavenger: str(required=False)
    ops_admin_mgmt: str(required=False)
    broadcast_video: str(required=False)
    network_control: str(required=False)
    bulk_data: str(required=False)

bandwidth_settings_type:
  is_common_between_all_interface_speeds: bool(required=False)
  interface_speed_settings: list(include('interface_speed_settings_type'), required=False)

interface_speed_settings_type:
  interface_speed: enum("ALL", "HUNDRED_GBPS", "TEN_GBPS", "ONE_GBPS", "HUNDRED_MBPS", "TEN_MBPS", "ONE_MBPS", required=False)
  bandwidth_percentages: include('bandwidth_percentages_type', required=False)

bandwidth_percentages_type:
  transactional_data: str(required=False)
  best_effort: str(required=False)
  voip_telephony: str(required=False)
  multimedia_streaming: str(required=False)
  real_time_interactive: str(required=False)
  multimedia_conferencing: str(required=False)
  signaling: str(required=False)
  scavenger: str(required=False)
  ops_admin_mgmt: str(required=False)
  broadcast_video: str(required=False)
  network_control: str(required=False)
  bulk_data: str(required=False)

application_sets_type:
  name: str(required=True)

application_type:
  name: str(required=True)
  description: str(required=False)
  help_string: str(required=False)
  type: enum("server_name", "url", "server_ip", required=False)
  server_name: str(required=False)
  dscp: int(required=False, min=0, max=63)
  network_identity: include('network_identity_type', required=False)
  app_protocol: enum("TCP", "UDP", "TCP_UDP", "IP", required=False)
  url: str(required=False)
  traffic_class: enum("BROADCAST_VIDEO", "BULK_DATA", "MULTIMEDIA_CONFERENCING", "MULTIMEDIA_STREAMING", "NETWORK_CONTROL", "OPS_ADMIN_MGMT", "REAL_TIME_INTERACTIVE", "SIGNALING", "TRANSACTIONAL_DATA", "VOIP_TELEPHONY", "BEST_EFFORT", "SCAVENGER", required=False)
  ignore_conflict: bool(required=False)
  rank: int(required=False)
  engine_id: int(required=False)
  application_set_name: str(required=False)

network_identity_type:
  protocol: str(required=False)
  port: str(required=False)
  ip_subnet: list(str(), required=False)
  lower_port: str(required=False)
  upper_port: str(required=False)

application_policy_type:
  name: str(required=True)
  application_set_name: str(required=False)
  policy_status: enum("NONE", "DELETED", "RESTORED", required=False)
  site_names: list(str(), required=False)
  device_type: str(required=True)
  ssid_name: str(required=False)
  application_queuing_profile_name: str(required=False)
  clause: list(include('clause_details_type'), required=False)

clause_details_type:
  clause_type: enum("BUSINESS_RELEVANCE", "APPLICATION_POLICY_KNOBS", required=False)
  relevance_details: list(include('relevance_details_type'), required=False)

relevance_details_type:
  relevance: enum("BUSINESS_RELEVANT", "BUSINESS_IRRELEVANT", "DEFAULT", required=False)
  application_set_name: list(str(), required=False)
#====================================================================
#   End of schema
#====================================================================